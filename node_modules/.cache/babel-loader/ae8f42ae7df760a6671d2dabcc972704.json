{"ast":null,"code":"import { withInstall } from 'element-plus/es/utils/with-install';\nimport { ref, getCurrentInstance, watch, nextTick, computed, shallowRef, defineComponent, inject, h, resolveComponent, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createVNode, withCtx, createBlock, resolveDynamicComponent, createCommentVNode, provide, toDisplayString } from 'vue';\nimport { useLocaleInject } from 'element-plus/es/hooks';\nimport { FixedSizeList } from 'element-plus/es/components/virtual-list';\nimport { buildProps, definePropType, mutable } from 'element-plus/es/utils/props';\nimport { isFunction } from '@vue/shared';\nimport { CaretRight } from '@element-plus/icons';\nimport ElIcon from 'element-plus/es/components/icon';\nimport ElCheckbox from 'element-plus/es/components/checkbox';\nconst ROOT_TREE_INJECTION_KEY = Symbol();\nconst EMPTY_NODE = {\n  key: -1,\n  level: -1,\n  data: {}\n};\nvar TreeOptionsEnum;\n\n(function (TreeOptionsEnum2) {\n  TreeOptionsEnum2[\"KEY\"] = \"id\";\n  TreeOptionsEnum2[\"LABEL\"] = \"label\";\n  TreeOptionsEnum2[\"CHILDREN\"] = \"children\";\n  TreeOptionsEnum2[\"DISABLED\"] = \"disabled\";\n})(TreeOptionsEnum || (TreeOptionsEnum = {}));\n\nvar SetOperationEnum;\n\n(function (SetOperationEnum2) {\n  SetOperationEnum2[\"ADD\"] = \"add\";\n  SetOperationEnum2[\"DELETE\"] = \"delete\";\n})(SetOperationEnum || (SetOperationEnum = {}));\n\nconst treeProps = buildProps({\n  data: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  emptyText: {\n    type: String\n  },\n  height: {\n    type: Number,\n    default: 200\n  },\n  props: {\n    type: definePropType(Object),\n    default: () => mutable({\n      children: TreeOptionsEnum.CHILDREN,\n      label: TreeOptionsEnum.LABEL,\n      disabled: TreeOptionsEnum.DISABLED,\n      value: TreeOptionsEnum.KEY\n    })\n  },\n  highlightCurrent: {\n    type: Boolean,\n    default: false\n  },\n  showCheckbox: {\n    type: Boolean,\n    default: false\n  },\n  defaultCheckedKeys: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  checkStrictly: {\n    type: Boolean,\n    default: false\n  },\n  defaultExpandedKeys: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  indent: {\n    type: Number,\n    default: 16\n  },\n  icon: {\n    type: String\n  },\n  expandOnClickNode: {\n    type: Boolean,\n    default: true\n  },\n  checkOnClickNode: {\n    type: Boolean,\n    default: false\n  },\n  currentNodeKey: {\n    type: definePropType([String, Number])\n  },\n  accordion: {\n    type: Boolean,\n    default: false\n  },\n  filterMethod: {\n    type: definePropType(Function)\n  },\n  perfMode: {\n    type: Boolean,\n    default: true\n  }\n});\nconst treeNodeProps = buildProps({\n  node: {\n    type: definePropType(Object),\n    default: () => mutable(EMPTY_NODE)\n  },\n  expanded: {\n    type: Boolean,\n    default: false\n  },\n  checked: {\n    type: Boolean,\n    default: false\n  },\n  indeterminate: {\n    type: Boolean,\n    default: false\n  },\n  showCheckbox: {\n    type: Boolean,\n    default: false\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  current: {\n    type: Boolean,\n    default: false\n  },\n  hiddenExpandIcon: {\n    type: Boolean,\n    default: false\n  }\n});\nconst treeNodeContentProps = buildProps({\n  node: {\n    type: definePropType(Object),\n    required: true\n  }\n});\nconst NODE_CLICK = \"node-click\";\nconst NODE_EXPAND = \"node-expand\";\nconst NODE_COLLAPSE = \"node-collapse\";\nconst CURRENT_CHANGE = \"current-change\";\nconst NODE_CHECK = \"check\";\nconst NODE_CHECK_CHANGE = \"check-change\";\nconst NODE_CONTEXTMENU = \"node-contextmenu\";\nconst treeEmits = {\n  [NODE_CLICK]: (data, node) => data && node,\n  [NODE_EXPAND]: (data, node) => data && node,\n  [NODE_COLLAPSE]: (data, node) => data && node,\n  [CURRENT_CHANGE]: (data, node) => data && node,\n  [NODE_CHECK]: (data, checkedInfo) => data && checkedInfo,\n  [NODE_CHECK_CHANGE]: (data, checked) => data && typeof checked === \"boolean\",\n  [NODE_CONTEXTMENU]: (event, data, node) => event && data && node\n};\nconst treeNodeEmits = {\n  click: node => !!node,\n  toggle: node => !!node,\n  check: (node, checked) => node && typeof checked === \"boolean\"\n};\n\nfunction useCheck(props, tree) {\n  const checkedKeys = ref(new Set());\n  const indeterminateKeys = ref(new Set());\n  const {\n    emit\n  } = getCurrentInstance();\n  watch(() => tree.value, () => {\n    return nextTick(() => {\n      _setCheckedKeys(props.defaultCheckedKeys);\n    });\n  }, {\n    immediate: true\n  });\n\n  const updateCheckedKeys = () => {\n    if (!tree.value || !props.showCheckbox || props.checkStrictly) {\n      return;\n    }\n\n    const {\n      levelTreeNodeMap,\n      maxLevel\n    } = tree.value;\n    const checkedKeySet = checkedKeys.value;\n    const indeterminateKeySet = new Set();\n\n    for (let level = maxLevel - 1; level >= 1; --level) {\n      const nodes = levelTreeNodeMap.get(level);\n      if (!nodes) continue;\n      nodes.forEach(node => {\n        const children = node.children;\n\n        if (children) {\n          let allChecked = true;\n          let hasChecked = false;\n\n          for (let i = 0; i < children.length; ++i) {\n            const childNode = children[i];\n            const key = childNode.key;\n\n            if (checkedKeySet.has(key)) {\n              hasChecked = true;\n            } else if (indeterminateKeySet.has(key)) {\n              allChecked = false;\n              hasChecked = true;\n              break;\n            } else {\n              allChecked = false;\n            }\n          }\n\n          if (allChecked) {\n            checkedKeySet.add(node.key);\n          } else if (hasChecked) {\n            indeterminateKeySet.add(node.key);\n            checkedKeySet.delete(node.key);\n          } else {\n            checkedKeySet.delete(node.key);\n            indeterminateKeySet.delete(node.key);\n          }\n        }\n      });\n    }\n\n    indeterminateKeys.value = indeterminateKeySet;\n  };\n\n  const isChecked = node => checkedKeys.value.has(node.key);\n\n  const isIndeterminate = node => indeterminateKeys.value.has(node.key);\n\n  const toggleCheckbox = (node, isChecked2, nodeClick = true) => {\n    const checkedKeySet = checkedKeys.value;\n\n    const toggle = (node2, checked) => {\n      checkedKeySet[checked ? SetOperationEnum.ADD : SetOperationEnum.DELETE](node2.key);\n      const children = node2.children;\n\n      if (!props.checkStrictly && children) {\n        children.forEach(childNode => {\n          if (!childNode.disabled) {\n            toggle(childNode, checked);\n          }\n        });\n      }\n    };\n\n    toggle(node, isChecked2);\n    updateCheckedKeys();\n\n    if (nodeClick) {\n      afterNodeCheck(node, isChecked2);\n    }\n  };\n\n  const afterNodeCheck = (node, checked) => {\n    const {\n      checkedNodes,\n      checkedKeys: checkedKeys2\n    } = getChecked();\n    const {\n      halfCheckedNodes,\n      halfCheckedKeys\n    } = getHalfChecked();\n    emit(NODE_CHECK, node.data, {\n      checkedKeys: checkedKeys2,\n      checkedNodes,\n      halfCheckedKeys,\n      halfCheckedNodes\n    });\n    emit(NODE_CHECK_CHANGE, node.data, checked);\n  };\n\n  function getCheckedKeys(leafOnly = false) {\n    return getChecked(leafOnly).checkedKeys;\n  }\n\n  function getCheckedNodes(leafOnly = false) {\n    return getChecked(leafOnly).checkedNodes;\n  }\n\n  function getHalfCheckedKeys() {\n    return getHalfChecked().halfCheckedKeys;\n  }\n\n  function getHalfCheckedNodes() {\n    return getHalfChecked().halfCheckedNodes;\n  }\n\n  function getChecked(leafOnly = false) {\n    const checkedNodes = [];\n    const keys = [];\n\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      const {\n        treeNodeMap\n      } = tree.value;\n      checkedKeys.value.forEach(key => {\n        const node = treeNodeMap.get(key);\n\n        if (node && (!leafOnly || leafOnly && node.isLeaf)) {\n          keys.push(key);\n          checkedNodes.push(node.data);\n        }\n      });\n    }\n\n    return {\n      checkedKeys: keys,\n      checkedNodes\n    };\n  }\n\n  function getHalfChecked() {\n    const halfCheckedNodes = [];\n    const halfCheckedKeys = [];\n\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      const {\n        treeNodeMap\n      } = tree.value;\n      indeterminateKeys.value.forEach(key => {\n        const node = treeNodeMap.get(key);\n\n        if (node) {\n          halfCheckedKeys.push(key);\n          halfCheckedNodes.push(node.data);\n        }\n      });\n    }\n\n    return {\n      halfCheckedNodes,\n      halfCheckedKeys\n    };\n  }\n\n  function setCheckedKeys(keys) {\n    checkedKeys.value.clear();\n\n    _setCheckedKeys(keys);\n  }\n\n  function setChecked(key, isChecked2) {\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      const node = tree.value.treeNodeMap.get(key);\n\n      if (node) {\n        toggleCheckbox(node, isChecked2, false);\n      }\n    }\n  }\n\n  function _setCheckedKeys(keys) {\n    if (tree == null ? void 0 : tree.value) {\n      const {\n        treeNodeMap\n      } = tree.value;\n\n      if (props.showCheckbox && treeNodeMap && keys) {\n        for (let i = 0; i < keys.length; ++i) {\n          const key = keys[i];\n          const node = treeNodeMap.get(key);\n\n          if (node && !isChecked(node)) {\n            toggleCheckbox(node, true, false);\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    updateCheckedKeys,\n    toggleCheckbox,\n    isChecked,\n    isIndeterminate,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys\n  };\n}\n\nfunction useFilter(props, tree) {\n  const hiddenNodeKeySet = ref(new Set([]));\n  const hiddenExpandIconKeySet = ref(new Set([]));\n  const filterable = computed(() => {\n    return isFunction(props.filterMethod);\n  });\n\n  function doFilter(query) {\n    var _a;\n\n    if (!filterable.value) {\n      return;\n    }\n\n    const expandKeySet = new Set();\n    const hiddenExpandIconKeys = hiddenExpandIconKeySet.value;\n    const hiddenKeys = hiddenNodeKeySet.value;\n    const family = [];\n    const nodes = ((_a = tree.value) == null ? void 0 : _a.treeNodes) || [];\n    const filter = props.filterMethod;\n    hiddenKeys.clear();\n\n    function traverse(nodes2) {\n      nodes2.forEach(node => {\n        family.push(node);\n\n        if (filter == null ? void 0 : filter(query, node.data)) {\n          family.forEach(member => {\n            expandKeySet.add(member.key);\n          });\n        } else if (node.isLeaf) {\n          hiddenKeys.add(node.key);\n        }\n\n        const children = node.children;\n\n        if (children) {\n          traverse(children);\n        }\n\n        if (!node.isLeaf) {\n          if (!expandKeySet.has(node.key)) {\n            hiddenKeys.add(node.key);\n          } else if (children) {\n            let allHidden = true;\n\n            for (let i = 0; i < children.length; ++i) {\n              const childNode = children[i];\n\n              if (!hiddenKeys.has(childNode.key)) {\n                allHidden = false;\n                break;\n              }\n            }\n\n            if (allHidden) {\n              hiddenExpandIconKeys.add(node.key);\n            } else {\n              hiddenExpandIconKeys.delete(node.key);\n            }\n          }\n        }\n\n        family.pop();\n      });\n    }\n\n    traverse(nodes);\n    return expandKeySet;\n  }\n\n  function isForceHiddenExpandIcon(node) {\n    return hiddenExpandIconKeySet.value.has(node.key);\n  }\n\n  return {\n    hiddenExpandIconKeySet,\n    hiddenNodeKeySet,\n    doFilter,\n    isForceHiddenExpandIcon\n  };\n}\n\nfunction useTree(props, emit) {\n  const expandedKeySet = ref(new Set(props.defaultExpandedKeys));\n  const currentKey = ref();\n  const tree = shallowRef();\n  watch(() => props.currentNodeKey, key => {\n    currentKey.value = key;\n  }, {\n    immediate: true\n  });\n  watch(() => props.data, data => {\n    setData(data);\n  }, {\n    immediate: true\n  });\n  const {\n    isIndeterminate,\n    isChecked,\n    toggleCheckbox,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys\n  } = useCheck(props, tree);\n  const {\n    doFilter,\n    hiddenNodeKeySet,\n    isForceHiddenExpandIcon\n  } = useFilter(props, tree);\n  const valueKey = computed(() => {\n    var _a;\n\n    return ((_a = props.props) == null ? void 0 : _a.value) || TreeOptionsEnum.KEY;\n  });\n  const childrenKey = computed(() => {\n    var _a;\n\n    return ((_a = props.props) == null ? void 0 : _a.children) || TreeOptionsEnum.CHILDREN;\n  });\n  const disabledKey = computed(() => {\n    var _a;\n\n    return ((_a = props.props) == null ? void 0 : _a.disabled) || TreeOptionsEnum.DISABLED;\n  });\n  const labelKey = computed(() => {\n    var _a;\n\n    return ((_a = props.props) == null ? void 0 : _a.label) || TreeOptionsEnum.LABEL;\n  });\n  const flattenTree = computed(() => {\n    const expandedKeys = expandedKeySet.value;\n    const hiddenKeys = hiddenNodeKeySet.value;\n    const flattenNodes = [];\n    const nodes = tree.value && tree.value.treeNodes || [];\n\n    function traverse() {\n      const stack = [];\n\n      for (let i = nodes.length - 1; i >= 0; --i) {\n        stack.push(nodes[i]);\n      }\n\n      while (stack.length) {\n        const node = stack.pop();\n        if (!node) continue;\n\n        if (!hiddenKeys.has(node.key)) {\n          flattenNodes.push(node);\n        }\n\n        if (expandedKeys.has(node.key)) {\n          const children = node.children;\n\n          if (children) {\n            const length = children.length;\n\n            for (let i = length - 1; i >= 0; --i) {\n              stack.push(children[i]);\n            }\n          }\n        }\n      }\n    }\n\n    traverse();\n    return flattenNodes;\n  });\n  const isNotEmpty = computed(() => {\n    return flattenTree.value.length > 0;\n  });\n\n  function createTree(data) {\n    const treeNodeMap = new Map();\n    const levelTreeNodeMap = new Map();\n    let maxLevel = 1;\n\n    function traverse(nodes, level = 1, parent = void 0) {\n      var _a;\n\n      const siblings = [];\n\n      for (let index = 0; index < nodes.length; ++index) {\n        const rawNode = nodes[index];\n        const value = getKey(rawNode);\n        const node = {\n          level,\n          key: value,\n          data: rawNode\n        };\n        node.label = getLabel(rawNode);\n        node.parent = parent;\n        const children = getChildren(rawNode);\n        node.disabled = getDisabled(rawNode);\n        node.isLeaf = !children || children.length === 0;\n\n        if (children && children.length) {\n          node.children = traverse(children, level + 1, node);\n        }\n\n        siblings.push(node);\n        treeNodeMap.set(value, node);\n\n        if (!levelTreeNodeMap.has(level)) {\n          levelTreeNodeMap.set(level, []);\n        }\n\n        (_a = levelTreeNodeMap.get(level)) == null ? void 0 : _a.push(node);\n      }\n\n      if (level > maxLevel) {\n        maxLevel = level;\n      }\n\n      return siblings;\n    }\n\n    const treeNodes = traverse(data);\n    return {\n      treeNodeMap,\n      levelTreeNodeMap,\n      maxLevel,\n      treeNodes\n    };\n  }\n\n  function filter(query) {\n    const keys = doFilter(query);\n\n    if (keys) {\n      expandedKeySet.value = keys;\n    }\n  }\n\n  function getChildren(node) {\n    return node[childrenKey.value];\n  }\n\n  function getKey(node) {\n    if (!node) {\n      return \"\";\n    }\n\n    return node[valueKey.value];\n  }\n\n  function getDisabled(node) {\n    return node[disabledKey.value];\n  }\n\n  function getLabel(node) {\n    return node[labelKey.value];\n  }\n\n  function toggleExpand(node) {\n    const expandedKeys = expandedKeySet.value;\n\n    if (expandedKeys.has(node.key)) {\n      collapse(node);\n    } else {\n      expand(node);\n    }\n  }\n\n  function handleNodeClick(node) {\n    emit(NODE_CLICK, node.data, node);\n    handleCurrentChange(node);\n\n    if (props.expandOnClickNode) {\n      toggleExpand(node);\n    }\n\n    if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {\n      toggleCheckbox(node, !isChecked(node), true);\n    }\n  }\n\n  function handleCurrentChange(node) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key;\n      emit(CURRENT_CHANGE, node.data, node);\n    }\n  }\n\n  function handleNodeCheck(node, checked) {\n    toggleCheckbox(node, checked);\n  }\n\n  function expand(node) {\n    const keySet = expandedKeySet.value;\n\n    if ((tree == null ? void 0 : tree.value) && props.accordion) {\n      const {\n        treeNodeMap\n      } = tree.value;\n      keySet.forEach(key => {\n        const node2 = treeNodeMap.get(key);\n\n        if (node2 && node2.level === node2.level) {\n          keySet.delete(key);\n        }\n      });\n    }\n\n    keySet.add(node.key);\n    emit(NODE_EXPAND, node.data, node);\n  }\n\n  function collapse(node) {\n    expandedKeySet.value.delete(node.key);\n    emit(NODE_COLLAPSE, node.data, node);\n  }\n\n  function isExpanded(node) {\n    return expandedKeySet.value.has(node.key);\n  }\n\n  function isDisabled(node) {\n    return !!node.disabled;\n  }\n\n  function isCurrent(node) {\n    const current = currentKey.value;\n    return !!current && current === node.key;\n  }\n\n  function getCurrentNode() {\n    var _a, _b;\n\n    if (!currentKey.value) return void 0;\n    return (_b = (_a = tree == null ? void 0 : tree.value) == null ? void 0 : _a.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;\n  }\n\n  function getCurrentKey() {\n    return currentKey.value;\n  }\n\n  function setCurrentKey(key) {\n    currentKey.value = key;\n  }\n\n  function setData(data) {\n    nextTick(() => tree.value = createTree(data));\n  }\n\n  return {\n    tree,\n    flattenTree,\n    isNotEmpty,\n    getKey,\n    getChildren,\n    toggleExpand,\n    toggleCheckbox,\n    isExpanded,\n    isChecked,\n    isIndeterminate,\n    isDisabled,\n    isCurrent,\n    isForceHiddenExpandIcon,\n    handleNodeClick,\n    handleNodeCheck,\n    getCurrentNode,\n    getCurrentKey,\n    setCurrentKey,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n    filter,\n    setData\n  };\n}\n\nvar ElNodeContent = defineComponent({\n  name: \"ElTreeNodeContent\",\n  props: treeNodeContentProps,\n\n  setup(props) {\n    const tree = inject(ROOT_TREE_INJECTION_KEY);\n    return () => {\n      const node = props.node;\n      const {\n        data\n      } = node;\n      return (tree == null ? void 0 : tree.ctx.slots.default) ? tree.ctx.slots.default({\n        node,\n        data\n      }) : h(\"span\", {\n        class: \"el-tree-node__label\"\n      }, [node == null ? void 0 : node.label]);\n    };\n  }\n\n});\nconst DEFAULT_ICON = \"caret-right\";\nvar script$1 = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElIcon,\n    CaretRight,\n    ElCheckbox,\n    ElNodeContent\n  },\n  props: treeNodeProps,\n  emits: treeNodeEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const tree = inject(ROOT_TREE_INJECTION_KEY);\n    const indent = computed(() => {\n      return (tree == null ? void 0 : tree.props.indent) || 16;\n    });\n    const icon = computed(() => {\n      return (tree == null ? void 0 : tree.props.icon) ? tree.props.icon : DEFAULT_ICON;\n    });\n\n    const handleClick = () => {\n      emit(\"click\", props.node);\n    };\n\n    const handleExpandIconClick = () => {\n      emit(\"toggle\", props.node);\n    };\n\n    const handleCheckChange = value => {\n      emit(\"check\", props.node, value);\n    };\n\n    const handleContextMenu = event => {\n      var _a, _b, _c, _d;\n\n      if ((_c = (_b = (_a = tree == null ? void 0 : tree.instance) == null ? void 0 : _a.vnode) == null ? void 0 : _b.props) == null ? void 0 : _c[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n\n      tree == null ? void 0 : tree.ctx.emit(NODE_CONTEXTMENU, event, (_d = props.node) == null ? void 0 : _d.data, props.node);\n    };\n\n    return {\n      indent,\n      icon,\n      handleClick,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleContextMenu\n    };\n  }\n\n});\nconst _hoisted_1$1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"data-key\"];\n\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a, _b, _c;\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n\n  const _component_el_node_content = resolveComponent(\"el-node-content\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([\"el-tree-node\", {\n      \"is-expanded\": _ctx.expanded,\n      \"is-current\": _ctx.current,\n      \"is-focusable\": !_ctx.disabled,\n      \"is-checked\": !_ctx.disabled && _ctx.checked\n    }]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.disabled,\n    \"aria-checked\": _ctx.checked,\n    \"data-key\": (_a = _ctx.node) == null ? void 0 : _a.key,\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args))\n  }, [createElementVNode(\"div\", {\n    class: \"el-tree-node__content\",\n    style: normalizeStyle({\n      paddingLeft: `${(_ctx.node.level - 1) * _ctx.indent}px`\n    })\n  }, [createVNode(_component_el_icon, {\n    class: normalizeClass([{\n      \"is-leaf\": (_b = _ctx.node) == null ? void 0 : _b.isLeaf,\n      \"is-hidden\": _ctx.hiddenExpandIcon,\n      expanded: !((_c = _ctx.node) == null ? void 0 : _c.isLeaf) && _ctx.expanded\n    }, \"el-tree-node__expand-icon\"]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"]), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 0,\n    \"model-value\": _ctx.checked,\n    indeterminate: _ctx.indeterminate,\n    disabled: _ctx.disabled,\n    onChange: _ctx.handleCheckChange,\n    onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"]))\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), createVNode(_component_el_node_content, {\n    node: _ctx.node\n  }, null, 8, [\"node\"])], 4)], 42, _hoisted_1$1);\n}\n\nscript$1.render = render$1;\nscript$1.__file = \"packages/components/tree-v2/src/tree-node.vue\";\nvar script = defineComponent({\n  name: \"ElTreeV2\",\n  components: {\n    ElTreeNode: script$1,\n    FixedSizeList\n  },\n  props: treeProps,\n  emits: treeEmits,\n\n  setup(props, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance()\n    });\n    const {\n      t\n    } = useLocaleInject();\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    } = useTree(props, ctx.emit);\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    });\n    return {\n      t,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck\n    };\n  }\n\n});\nconst _hoisted_1 = {\n  key: 1,\n  class: \"el-tree__empty-block\"\n};\nconst _hoisted_2 = {\n  class: \"el-tree__empty-text\"\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  const _component_fixed_size_list = resolveComponent(\"fixed-size-list\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-tree\", {\n      \"el-tree--highlight-current\": _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [_ctx.isNotEmpty ? (openBlock(), createBlock(_component_fixed_size_list, {\n    key: 0,\n    \"class-name\": \"el-tree-virtual-list\",\n    data: _ctx.flattenTree,\n    total: _ctx.flattenTree.length,\n    height: _ctx.height,\n    \"item-size\": _ctx.itemSize,\n    \"perf-mode\": _ctx.perfMode\n  }, {\n    default: withCtx(({\n      data,\n      index,\n      style\n    }) => [createVNode(_component_el_tree_node, {\n      key: data[index].key,\n      style: normalizeStyle(style),\n      node: data[index],\n      expanded: _ctx.isExpanded(data[index]),\n      \"show-checkbox\": _ctx.showCheckbox,\n      checked: _ctx.isChecked(data[index]),\n      indeterminate: _ctx.isIndeterminate(data[index]),\n      disabled: _ctx.isDisabled(data[index]),\n      current: _ctx.isCurrent(data[index]),\n      \"hidden-expand-icon\": _ctx.isForceHiddenExpandIcon(data[index]),\n      onClick: _ctx.handleNodeClick,\n      onToggle: _ctx.toggleExpand,\n      onCheck: _ctx.handleNodeCheck\n    }, null, 8, [\"style\", \"node\", \"expanded\", \"show-checkbox\", \"checked\", \"indeterminate\", \"disabled\", \"current\", \"hidden-expand-icon\", \"onClick\", \"onToggle\", \"onCheck\"])]),\n    _: 1\n  }, 8, [\"data\", \"total\", \"height\", \"item-size\", \"perf-mode\"])) : (openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"span\", _hoisted_2, toDisplayString(_ctx.emptyText || _ctx.t(\"el.tree.emptyText\")), 1)]))], 2);\n}\n\nscript.render = render;\nscript.__file = \"packages/components/tree-v2/src/tree.vue\";\nconst ElTreeV2 = withInstall(script);\nexport { ElTreeV2, ElTreeV2 as default };","map":{"version":3,"names":["withInstall","ref","getCurrentInstance","watch","nextTick","computed","shallowRef","defineComponent","inject","h","resolveComponent","openBlock","createElementBlock","normalizeClass","withModifiers","createElementVNode","normalizeStyle","createVNode","withCtx","createBlock","resolveDynamicComponent","createCommentVNode","provide","toDisplayString","useLocaleInject","FixedSizeList","buildProps","definePropType","mutable","isFunction","CaretRight","ElIcon","ElCheckbox","ROOT_TREE_INJECTION_KEY","Symbol","EMPTY_NODE","key","level","data","TreeOptionsEnum","TreeOptionsEnum2","SetOperationEnum","SetOperationEnum2","treeProps","type","Array","default","emptyText","String","height","Number","props","Object","children","CHILDREN","label","LABEL","disabled","DISABLED","value","KEY","highlightCurrent","Boolean","showCheckbox","defaultCheckedKeys","checkStrictly","defaultExpandedKeys","indent","icon","expandOnClickNode","checkOnClickNode","currentNodeKey","accordion","filterMethod","Function","perfMode","treeNodeProps","node","expanded","checked","indeterminate","current","hiddenExpandIcon","treeNodeContentProps","required","NODE_CLICK","NODE_EXPAND","NODE_COLLAPSE","CURRENT_CHANGE","NODE_CHECK","NODE_CHECK_CHANGE","NODE_CONTEXTMENU","treeEmits","checkedInfo","event","treeNodeEmits","click","toggle","check","useCheck","tree","checkedKeys","Set","indeterminateKeys","emit","_setCheckedKeys","immediate","updateCheckedKeys","levelTreeNodeMap","maxLevel","checkedKeySet","indeterminateKeySet","nodes","get","forEach","allChecked","hasChecked","i","length","childNode","has","add","delete","isChecked","isIndeterminate","toggleCheckbox","isChecked2","nodeClick","node2","ADD","DELETE","afterNodeCheck","checkedNodes","checkedKeys2","getChecked","halfCheckedNodes","halfCheckedKeys","getHalfChecked","getCheckedKeys","leafOnly","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","keys","treeNodeMap","isLeaf","push","setCheckedKeys","clear","setChecked","useFilter","hiddenNodeKeySet","hiddenExpandIconKeySet","filterable","doFilter","query","_a","expandKeySet","hiddenExpandIconKeys","hiddenKeys","family","treeNodes","filter","traverse","nodes2","member","allHidden","pop","isForceHiddenExpandIcon","useTree","expandedKeySet","currentKey","setData","valueKey","childrenKey","disabledKey","labelKey","flattenTree","expandedKeys","flattenNodes","stack","isNotEmpty","createTree","Map","parent","siblings","index","rawNode","getKey","getLabel","getChildren","getDisabled","set","toggleExpand","collapse","expand","handleNodeClick","handleCurrentChange","isCurrent","handleNodeCheck","keySet","isExpanded","isDisabled","getCurrentNode","_b","getCurrentKey","setCurrentKey","ElNodeContent","name","setup","ctx","slots","class","DEFAULT_ICON","script$1","components","emits","handleClick","handleExpandIconClick","handleCheckChange","handleContextMenu","_c","_d","instance","vnode","stopPropagation","preventDefault","_hoisted_1$1","render$1","_ctx","_cache","$props","$setup","$data","$options","_component_el_icon","_component_el_checkbox","_component_el_node_content","role","tabindex","onClick","args","onContextmenu","style","paddingLeft","_","onChange","render","__file","script","ElTreeNode","t","expose","itemSize","_hoisted_1","_hoisted_2","_component_el_tree_node","_component_fixed_size_list","total","onToggle","onCheck","ElTreeV2"],"sources":["/home/haibara/ghq/github.com/w-haibara/kakemoti-ui/node_modules/element-plus/es/components/tree-v2/index.js"],"sourcesContent":["import { withInstall } from 'element-plus/es/utils/with-install';\nimport { ref, getCurrentInstance, watch, nextTick, computed, shallowRef, defineComponent, inject, h, resolveComponent, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createVNode, withCtx, createBlock, resolveDynamicComponent, createCommentVNode, provide, toDisplayString } from 'vue';\nimport { useLocaleInject } from 'element-plus/es/hooks';\nimport { FixedSizeList } from 'element-plus/es/components/virtual-list';\nimport { buildProps, definePropType, mutable } from 'element-plus/es/utils/props';\nimport { isFunction } from '@vue/shared';\nimport { CaretRight } from '@element-plus/icons';\nimport ElIcon from 'element-plus/es/components/icon';\nimport ElCheckbox from 'element-plus/es/components/checkbox';\n\nconst ROOT_TREE_INJECTION_KEY = Symbol();\nconst EMPTY_NODE = {\n  key: -1,\n  level: -1,\n  data: {}\n};\nvar TreeOptionsEnum;\n(function(TreeOptionsEnum2) {\n  TreeOptionsEnum2[\"KEY\"] = \"id\";\n  TreeOptionsEnum2[\"LABEL\"] = \"label\";\n  TreeOptionsEnum2[\"CHILDREN\"] = \"children\";\n  TreeOptionsEnum2[\"DISABLED\"] = \"disabled\";\n})(TreeOptionsEnum || (TreeOptionsEnum = {}));\nvar SetOperationEnum;\n(function(SetOperationEnum2) {\n  SetOperationEnum2[\"ADD\"] = \"add\";\n  SetOperationEnum2[\"DELETE\"] = \"delete\";\n})(SetOperationEnum || (SetOperationEnum = {}));\nconst treeProps = buildProps({\n  data: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  emptyText: {\n    type: String\n  },\n  height: {\n    type: Number,\n    default: 200\n  },\n  props: {\n    type: definePropType(Object),\n    default: () => mutable({\n      children: TreeOptionsEnum.CHILDREN,\n      label: TreeOptionsEnum.LABEL,\n      disabled: TreeOptionsEnum.DISABLED,\n      value: TreeOptionsEnum.KEY\n    })\n  },\n  highlightCurrent: {\n    type: Boolean,\n    default: false\n  },\n  showCheckbox: {\n    type: Boolean,\n    default: false\n  },\n  defaultCheckedKeys: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  checkStrictly: {\n    type: Boolean,\n    default: false\n  },\n  defaultExpandedKeys: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  indent: {\n    type: Number,\n    default: 16\n  },\n  icon: {\n    type: String\n  },\n  expandOnClickNode: {\n    type: Boolean,\n    default: true\n  },\n  checkOnClickNode: {\n    type: Boolean,\n    default: false\n  },\n  currentNodeKey: {\n    type: definePropType([String, Number])\n  },\n  accordion: {\n    type: Boolean,\n    default: false\n  },\n  filterMethod: {\n    type: definePropType(Function)\n  },\n  perfMode: {\n    type: Boolean,\n    default: true\n  }\n});\nconst treeNodeProps = buildProps({\n  node: {\n    type: definePropType(Object),\n    default: () => mutable(EMPTY_NODE)\n  },\n  expanded: {\n    type: Boolean,\n    default: false\n  },\n  checked: {\n    type: Boolean,\n    default: false\n  },\n  indeterminate: {\n    type: Boolean,\n    default: false\n  },\n  showCheckbox: {\n    type: Boolean,\n    default: false\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  current: {\n    type: Boolean,\n    default: false\n  },\n  hiddenExpandIcon: {\n    type: Boolean,\n    default: false\n  }\n});\nconst treeNodeContentProps = buildProps({\n  node: {\n    type: definePropType(Object),\n    required: true\n  }\n});\nconst NODE_CLICK = \"node-click\";\nconst NODE_EXPAND = \"node-expand\";\nconst NODE_COLLAPSE = \"node-collapse\";\nconst CURRENT_CHANGE = \"current-change\";\nconst NODE_CHECK = \"check\";\nconst NODE_CHECK_CHANGE = \"check-change\";\nconst NODE_CONTEXTMENU = \"node-contextmenu\";\nconst treeEmits = {\n  [NODE_CLICK]: (data, node) => data && node,\n  [NODE_EXPAND]: (data, node) => data && node,\n  [NODE_COLLAPSE]: (data, node) => data && node,\n  [CURRENT_CHANGE]: (data, node) => data && node,\n  [NODE_CHECK]: (data, checkedInfo) => data && checkedInfo,\n  [NODE_CHECK_CHANGE]: (data, checked) => data && typeof checked === \"boolean\",\n  [NODE_CONTEXTMENU]: (event, data, node) => event && data && node\n};\nconst treeNodeEmits = {\n  click: (node) => !!node,\n  toggle: (node) => !!node,\n  check: (node, checked) => node && typeof checked === \"boolean\"\n};\n\nfunction useCheck(props, tree) {\n  const checkedKeys = ref(new Set());\n  const indeterminateKeys = ref(new Set());\n  const { emit } = getCurrentInstance();\n  watch(() => tree.value, () => {\n    return nextTick(() => {\n      _setCheckedKeys(props.defaultCheckedKeys);\n    });\n  }, {\n    immediate: true\n  });\n  const updateCheckedKeys = () => {\n    if (!tree.value || !props.showCheckbox || props.checkStrictly) {\n      return;\n    }\n    const { levelTreeNodeMap, maxLevel } = tree.value;\n    const checkedKeySet = checkedKeys.value;\n    const indeterminateKeySet = new Set();\n    for (let level = maxLevel - 1; level >= 1; --level) {\n      const nodes = levelTreeNodeMap.get(level);\n      if (!nodes)\n        continue;\n      nodes.forEach((node) => {\n        const children = node.children;\n        if (children) {\n          let allChecked = true;\n          let hasChecked = false;\n          for (let i = 0; i < children.length; ++i) {\n            const childNode = children[i];\n            const key = childNode.key;\n            if (checkedKeySet.has(key)) {\n              hasChecked = true;\n            } else if (indeterminateKeySet.has(key)) {\n              allChecked = false;\n              hasChecked = true;\n              break;\n            } else {\n              allChecked = false;\n            }\n          }\n          if (allChecked) {\n            checkedKeySet.add(node.key);\n          } else if (hasChecked) {\n            indeterminateKeySet.add(node.key);\n            checkedKeySet.delete(node.key);\n          } else {\n            checkedKeySet.delete(node.key);\n            indeterminateKeySet.delete(node.key);\n          }\n        }\n      });\n    }\n    indeterminateKeys.value = indeterminateKeySet;\n  };\n  const isChecked = (node) => checkedKeys.value.has(node.key);\n  const isIndeterminate = (node) => indeterminateKeys.value.has(node.key);\n  const toggleCheckbox = (node, isChecked2, nodeClick = true) => {\n    const checkedKeySet = checkedKeys.value;\n    const toggle = (node2, checked) => {\n      checkedKeySet[checked ? SetOperationEnum.ADD : SetOperationEnum.DELETE](node2.key);\n      const children = node2.children;\n      if (!props.checkStrictly && children) {\n        children.forEach((childNode) => {\n          if (!childNode.disabled) {\n            toggle(childNode, checked);\n          }\n        });\n      }\n    };\n    toggle(node, isChecked2);\n    updateCheckedKeys();\n    if (nodeClick) {\n      afterNodeCheck(node, isChecked2);\n    }\n  };\n  const afterNodeCheck = (node, checked) => {\n    const { checkedNodes, checkedKeys: checkedKeys2 } = getChecked();\n    const { halfCheckedNodes, halfCheckedKeys } = getHalfChecked();\n    emit(NODE_CHECK, node.data, {\n      checkedKeys: checkedKeys2,\n      checkedNodes,\n      halfCheckedKeys,\n      halfCheckedNodes\n    });\n    emit(NODE_CHECK_CHANGE, node.data, checked);\n  };\n  function getCheckedKeys(leafOnly = false) {\n    return getChecked(leafOnly).checkedKeys;\n  }\n  function getCheckedNodes(leafOnly = false) {\n    return getChecked(leafOnly).checkedNodes;\n  }\n  function getHalfCheckedKeys() {\n    return getHalfChecked().halfCheckedKeys;\n  }\n  function getHalfCheckedNodes() {\n    return getHalfChecked().halfCheckedNodes;\n  }\n  function getChecked(leafOnly = false) {\n    const checkedNodes = [];\n    const keys = [];\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      const { treeNodeMap } = tree.value;\n      checkedKeys.value.forEach((key) => {\n        const node = treeNodeMap.get(key);\n        if (node && (!leafOnly || leafOnly && node.isLeaf)) {\n          keys.push(key);\n          checkedNodes.push(node.data);\n        }\n      });\n    }\n    return {\n      checkedKeys: keys,\n      checkedNodes\n    };\n  }\n  function getHalfChecked() {\n    const halfCheckedNodes = [];\n    const halfCheckedKeys = [];\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      const { treeNodeMap } = tree.value;\n      indeterminateKeys.value.forEach((key) => {\n        const node = treeNodeMap.get(key);\n        if (node) {\n          halfCheckedKeys.push(key);\n          halfCheckedNodes.push(node.data);\n        }\n      });\n    }\n    return {\n      halfCheckedNodes,\n      halfCheckedKeys\n    };\n  }\n  function setCheckedKeys(keys) {\n    checkedKeys.value.clear();\n    _setCheckedKeys(keys);\n  }\n  function setChecked(key, isChecked2) {\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      const node = tree.value.treeNodeMap.get(key);\n      if (node) {\n        toggleCheckbox(node, isChecked2, false);\n      }\n    }\n  }\n  function _setCheckedKeys(keys) {\n    if (tree == null ? void 0 : tree.value) {\n      const { treeNodeMap } = tree.value;\n      if (props.showCheckbox && treeNodeMap && keys) {\n        for (let i = 0; i < keys.length; ++i) {\n          const key = keys[i];\n          const node = treeNodeMap.get(key);\n          if (node && !isChecked(node)) {\n            toggleCheckbox(node, true, false);\n          }\n        }\n      }\n    }\n  }\n  return {\n    updateCheckedKeys,\n    toggleCheckbox,\n    isChecked,\n    isIndeterminate,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys\n  };\n}\n\nfunction useFilter(props, tree) {\n  const hiddenNodeKeySet = ref(new Set([]));\n  const hiddenExpandIconKeySet = ref(new Set([]));\n  const filterable = computed(() => {\n    return isFunction(props.filterMethod);\n  });\n  function doFilter(query) {\n    var _a;\n    if (!filterable.value) {\n      return;\n    }\n    const expandKeySet = new Set();\n    const hiddenExpandIconKeys = hiddenExpandIconKeySet.value;\n    const hiddenKeys = hiddenNodeKeySet.value;\n    const family = [];\n    const nodes = ((_a = tree.value) == null ? void 0 : _a.treeNodes) || [];\n    const filter = props.filterMethod;\n    hiddenKeys.clear();\n    function traverse(nodes2) {\n      nodes2.forEach((node) => {\n        family.push(node);\n        if (filter == null ? void 0 : filter(query, node.data)) {\n          family.forEach((member) => {\n            expandKeySet.add(member.key);\n          });\n        } else if (node.isLeaf) {\n          hiddenKeys.add(node.key);\n        }\n        const children = node.children;\n        if (children) {\n          traverse(children);\n        }\n        if (!node.isLeaf) {\n          if (!expandKeySet.has(node.key)) {\n            hiddenKeys.add(node.key);\n          } else if (children) {\n            let allHidden = true;\n            for (let i = 0; i < children.length; ++i) {\n              const childNode = children[i];\n              if (!hiddenKeys.has(childNode.key)) {\n                allHidden = false;\n                break;\n              }\n            }\n            if (allHidden) {\n              hiddenExpandIconKeys.add(node.key);\n            } else {\n              hiddenExpandIconKeys.delete(node.key);\n            }\n          }\n        }\n        family.pop();\n      });\n    }\n    traverse(nodes);\n    return expandKeySet;\n  }\n  function isForceHiddenExpandIcon(node) {\n    return hiddenExpandIconKeySet.value.has(node.key);\n  }\n  return {\n    hiddenExpandIconKeySet,\n    hiddenNodeKeySet,\n    doFilter,\n    isForceHiddenExpandIcon\n  };\n}\n\nfunction useTree(props, emit) {\n  const expandedKeySet = ref(new Set(props.defaultExpandedKeys));\n  const currentKey = ref();\n  const tree = shallowRef();\n  watch(() => props.currentNodeKey, (key) => {\n    currentKey.value = key;\n  }, {\n    immediate: true\n  });\n  watch(() => props.data, (data) => {\n    setData(data);\n  }, {\n    immediate: true\n  });\n  const {\n    isIndeterminate,\n    isChecked,\n    toggleCheckbox,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys\n  } = useCheck(props, tree);\n  const { doFilter, hiddenNodeKeySet, isForceHiddenExpandIcon } = useFilter(props, tree);\n  const valueKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.value) || TreeOptionsEnum.KEY;\n  });\n  const childrenKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.children) || TreeOptionsEnum.CHILDREN;\n  });\n  const disabledKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.disabled) || TreeOptionsEnum.DISABLED;\n  });\n  const labelKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.label) || TreeOptionsEnum.LABEL;\n  });\n  const flattenTree = computed(() => {\n    const expandedKeys = expandedKeySet.value;\n    const hiddenKeys = hiddenNodeKeySet.value;\n    const flattenNodes = [];\n    const nodes = tree.value && tree.value.treeNodes || [];\n    function traverse() {\n      const stack = [];\n      for (let i = nodes.length - 1; i >= 0; --i) {\n        stack.push(nodes[i]);\n      }\n      while (stack.length) {\n        const node = stack.pop();\n        if (!node)\n          continue;\n        if (!hiddenKeys.has(node.key)) {\n          flattenNodes.push(node);\n        }\n        if (expandedKeys.has(node.key)) {\n          const children = node.children;\n          if (children) {\n            const length = children.length;\n            for (let i = length - 1; i >= 0; --i) {\n              stack.push(children[i]);\n            }\n          }\n        }\n      }\n    }\n    traverse();\n    return flattenNodes;\n  });\n  const isNotEmpty = computed(() => {\n    return flattenTree.value.length > 0;\n  });\n  function createTree(data) {\n    const treeNodeMap = new Map();\n    const levelTreeNodeMap = new Map();\n    let maxLevel = 1;\n    function traverse(nodes, level = 1, parent = void 0) {\n      var _a;\n      const siblings = [];\n      for (let index = 0; index < nodes.length; ++index) {\n        const rawNode = nodes[index];\n        const value = getKey(rawNode);\n        const node = {\n          level,\n          key: value,\n          data: rawNode\n        };\n        node.label = getLabel(rawNode);\n        node.parent = parent;\n        const children = getChildren(rawNode);\n        node.disabled = getDisabled(rawNode);\n        node.isLeaf = !children || children.length === 0;\n        if (children && children.length) {\n          node.children = traverse(children, level + 1, node);\n        }\n        siblings.push(node);\n        treeNodeMap.set(value, node);\n        if (!levelTreeNodeMap.has(level)) {\n          levelTreeNodeMap.set(level, []);\n        }\n        (_a = levelTreeNodeMap.get(level)) == null ? void 0 : _a.push(node);\n      }\n      if (level > maxLevel) {\n        maxLevel = level;\n      }\n      return siblings;\n    }\n    const treeNodes = traverse(data);\n    return {\n      treeNodeMap,\n      levelTreeNodeMap,\n      maxLevel,\n      treeNodes\n    };\n  }\n  function filter(query) {\n    const keys = doFilter(query);\n    if (keys) {\n      expandedKeySet.value = keys;\n    }\n  }\n  function getChildren(node) {\n    return node[childrenKey.value];\n  }\n  function getKey(node) {\n    if (!node) {\n      return \"\";\n    }\n    return node[valueKey.value];\n  }\n  function getDisabled(node) {\n    return node[disabledKey.value];\n  }\n  function getLabel(node) {\n    return node[labelKey.value];\n  }\n  function toggleExpand(node) {\n    const expandedKeys = expandedKeySet.value;\n    if (expandedKeys.has(node.key)) {\n      collapse(node);\n    } else {\n      expand(node);\n    }\n  }\n  function handleNodeClick(node) {\n    emit(NODE_CLICK, node.data, node);\n    handleCurrentChange(node);\n    if (props.expandOnClickNode) {\n      toggleExpand(node);\n    }\n    if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {\n      toggleCheckbox(node, !isChecked(node), true);\n    }\n  }\n  function handleCurrentChange(node) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key;\n      emit(CURRENT_CHANGE, node.data, node);\n    }\n  }\n  function handleNodeCheck(node, checked) {\n    toggleCheckbox(node, checked);\n  }\n  function expand(node) {\n    const keySet = expandedKeySet.value;\n    if ((tree == null ? void 0 : tree.value) && props.accordion) {\n      const { treeNodeMap } = tree.value;\n      keySet.forEach((key) => {\n        const node2 = treeNodeMap.get(key);\n        if (node2 && node2.level === node2.level) {\n          keySet.delete(key);\n        }\n      });\n    }\n    keySet.add(node.key);\n    emit(NODE_EXPAND, node.data, node);\n  }\n  function collapse(node) {\n    expandedKeySet.value.delete(node.key);\n    emit(NODE_COLLAPSE, node.data, node);\n  }\n  function isExpanded(node) {\n    return expandedKeySet.value.has(node.key);\n  }\n  function isDisabled(node) {\n    return !!node.disabled;\n  }\n  function isCurrent(node) {\n    const current = currentKey.value;\n    return !!current && current === node.key;\n  }\n  function getCurrentNode() {\n    var _a, _b;\n    if (!currentKey.value)\n      return void 0;\n    return (_b = (_a = tree == null ? void 0 : tree.value) == null ? void 0 : _a.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;\n  }\n  function getCurrentKey() {\n    return currentKey.value;\n  }\n  function setCurrentKey(key) {\n    currentKey.value = key;\n  }\n  function setData(data) {\n    nextTick(() => tree.value = createTree(data));\n  }\n  return {\n    tree,\n    flattenTree,\n    isNotEmpty,\n    getKey,\n    getChildren,\n    toggleExpand,\n    toggleCheckbox,\n    isExpanded,\n    isChecked,\n    isIndeterminate,\n    isDisabled,\n    isCurrent,\n    isForceHiddenExpandIcon,\n    handleNodeClick,\n    handleNodeCheck,\n    getCurrentNode,\n    getCurrentKey,\n    setCurrentKey,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n    filter,\n    setData\n  };\n}\n\nvar ElNodeContent = defineComponent({\n  name: \"ElTreeNodeContent\",\n  props: treeNodeContentProps,\n  setup(props) {\n    const tree = inject(ROOT_TREE_INJECTION_KEY);\n    return () => {\n      const node = props.node;\n      const { data } = node;\n      return (tree == null ? void 0 : tree.ctx.slots.default) ? tree.ctx.slots.default({ node, data }) : h(\"span\", { class: \"el-tree-node__label\" }, [node == null ? void 0 : node.label]);\n    };\n  }\n});\n\nconst DEFAULT_ICON = \"caret-right\";\nvar script$1 = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElIcon,\n    CaretRight,\n    ElCheckbox,\n    ElNodeContent\n  },\n  props: treeNodeProps,\n  emits: treeNodeEmits,\n  setup(props, { emit }) {\n    const tree = inject(ROOT_TREE_INJECTION_KEY);\n    const indent = computed(() => {\n      return (tree == null ? void 0 : tree.props.indent) || 16;\n    });\n    const icon = computed(() => {\n      return (tree == null ? void 0 : tree.props.icon) ? tree.props.icon : DEFAULT_ICON;\n    });\n    const handleClick = () => {\n      emit(\"click\", props.node);\n    };\n    const handleExpandIconClick = () => {\n      emit(\"toggle\", props.node);\n    };\n    const handleCheckChange = (value) => {\n      emit(\"check\", props.node, value);\n    };\n    const handleContextMenu = (event) => {\n      var _a, _b, _c, _d;\n      if ((_c = (_b = (_a = tree == null ? void 0 : tree.instance) == null ? void 0 : _a.vnode) == null ? void 0 : _b.props) == null ? void 0 : _c[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      tree == null ? void 0 : tree.ctx.emit(NODE_CONTEXTMENU, event, (_d = props.node) == null ? void 0 : _d.data, props.node);\n    };\n    return {\n      indent,\n      icon,\n      handleClick,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleContextMenu\n    };\n  }\n});\n\nconst _hoisted_1$1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"data-key\"];\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a, _b, _c;\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n  const _component_el_node_content = resolveComponent(\"el-node-content\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([\"el-tree-node\", {\n      \"is-expanded\": _ctx.expanded,\n      \"is-current\": _ctx.current,\n      \"is-focusable\": !_ctx.disabled,\n      \"is-checked\": !_ctx.disabled && _ctx.checked\n    }]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.disabled,\n    \"aria-checked\": _ctx.checked,\n    \"data-key\": (_a = _ctx.node) == null ? void 0 : _a.key,\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args))\n  }, [\n    createElementVNode(\"div\", {\n      class: \"el-tree-node__content\",\n      style: normalizeStyle({ paddingLeft: `${(_ctx.node.level - 1) * _ctx.indent}px` })\n    }, [\n      createVNode(_component_el_icon, {\n        class: normalizeClass([\n          {\n            \"is-leaf\": (_b = _ctx.node) == null ? void 0 : _b.isLeaf,\n            \"is-hidden\": _ctx.hiddenExpandIcon,\n            expanded: !((_c = _ctx.node) == null ? void 0 : _c.isLeaf) && _ctx.expanded\n          },\n          \"el-tree-node__expand-icon\"\n        ]),\n        onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n      }, {\n        default: withCtx(() => [\n          (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))\n        ]),\n        _: 1\n      }, 8, [\"class\", \"onClick\"]),\n      _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n        key: 0,\n        \"model-value\": _ctx.checked,\n        indeterminate: _ctx.indeterminate,\n        disabled: _ctx.disabled,\n        onChange: _ctx.handleCheckChange,\n        onClick: _cache[0] || (_cache[0] = withModifiers(() => {\n        }, [\"stop\"]))\n      }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true),\n      createVNode(_component_el_node_content, { node: _ctx.node }, null, 8, [\"node\"])\n    ], 4)\n  ], 42, _hoisted_1$1);\n}\n\nscript$1.render = render$1;\nscript$1.__file = \"packages/components/tree-v2/src/tree-node.vue\";\n\nvar script = defineComponent({\n  name: \"ElTreeV2\",\n  components: {\n    ElTreeNode: script$1,\n    FixedSizeList\n  },\n  props: treeProps,\n  emits: treeEmits,\n  setup(props, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance()\n    });\n    const { t } = useLocaleInject();\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    } = useTree(props, ctx.emit);\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    });\n    return {\n      t,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck\n    };\n  }\n});\n\nconst _hoisted_1 = {\n  key: 1,\n  class: \"el-tree__empty-block\"\n};\nconst _hoisted_2 = { class: \"el-tree__empty-text\" };\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  const _component_fixed_size_list = resolveComponent(\"fixed-size-list\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-tree\", {\n      \"el-tree--highlight-current\": _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [\n    _ctx.isNotEmpty ? (openBlock(), createBlock(_component_fixed_size_list, {\n      key: 0,\n      \"class-name\": \"el-tree-virtual-list\",\n      data: _ctx.flattenTree,\n      total: _ctx.flattenTree.length,\n      height: _ctx.height,\n      \"item-size\": _ctx.itemSize,\n      \"perf-mode\": _ctx.perfMode\n    }, {\n      default: withCtx(({ data, index, style }) => [\n        createVNode(_component_el_tree_node, {\n          key: data[index].key,\n          style: normalizeStyle(style),\n          node: data[index],\n          expanded: _ctx.isExpanded(data[index]),\n          \"show-checkbox\": _ctx.showCheckbox,\n          checked: _ctx.isChecked(data[index]),\n          indeterminate: _ctx.isIndeterminate(data[index]),\n          disabled: _ctx.isDisabled(data[index]),\n          current: _ctx.isCurrent(data[index]),\n          \"hidden-expand-icon\": _ctx.isForceHiddenExpandIcon(data[index]),\n          onClick: _ctx.handleNodeClick,\n          onToggle: _ctx.toggleExpand,\n          onCheck: _ctx.handleNodeCheck\n        }, null, 8, [\"style\", \"node\", \"expanded\", \"show-checkbox\", \"checked\", \"indeterminate\", \"disabled\", \"current\", \"hidden-expand-icon\", \"onClick\", \"onToggle\", \"onCheck\"])\n      ]),\n      _: 1\n    }, 8, [\"data\", \"total\", \"height\", \"item-size\", \"perf-mode\"])) : (openBlock(), createElementBlock(\"div\", _hoisted_1, [\n      createElementVNode(\"span\", _hoisted_2, toDisplayString(_ctx.emptyText || _ctx.t(\"el.tree.emptyText\")), 1)\n    ]))\n  ], 2);\n}\n\nscript.render = render;\nscript.__file = \"packages/components/tree-v2/src/tree.vue\";\n\nconst ElTreeV2 = withInstall(script);\n\nexport { ElTreeV2, ElTreeV2 as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}